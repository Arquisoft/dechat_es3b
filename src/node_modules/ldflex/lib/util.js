"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIterator = getIterator;
exports.iterableToThen = iterableToThen;
exports.promiseToIterable = promiseToIterable;
exports.iterablePromise = iterablePromise;

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

/**
 * Gets the iterator function
 * from an iterable returned by a handler.
 */
function getIterator(handler) {
  return {
    execute(path, proxy) {
      // Get the iterable from the handler
      const iterable = handler.execute(path, proxy);
      if (!iterable) return undefined; // Return a function that returns the iterator

      const iterator = iterable[Symbol.asyncIterator]();
      return () => iterator;
    }

  };
}
/**
 * Gets a then function to the first element
 * of an iterable returned by a handler.
 */


function iterableToThen(handler) {
  return {
    execute(path, proxy) {
      // Get the iterable from the handler
      const iterable = handler.execute(path, proxy);
      if (!iterable) return undefined; // Return a then function to the first element

      const iterator = iterable[Symbol.asyncIterator]();
      return iteratorToThen(iterator);
    }

  };
}
/**
 * Returns a then function to the first element of the iterator.
 */


function iteratorToThen(iterator) {
  return (resolve, reject) => iterator.next().then(item => item.value).then(resolve, reject);
}
/**
 * Gets an iterable from a promise returned by a handler.
 */


function promiseToIterable(handler) {
  return {
    execute(path, proxy) {
      // Obtain the promise
      const promise = handler.execute(path, proxy);
      if (!promise) return undefined; // Return an asyncIterable with the promise as only element

      return (0, _wrapAsyncGenerator2.default)(function* () {
        yield promise;
      })();
    }

  };
}

function iterablePromise(createIterable) {
  const iterable = createIterable();
  const iterator = iterable[Symbol.asyncIterator]();
  return {
    [Symbol.asyncIterator]() {
      return iterator;
    },

    get then() {
      return iteratorToThen(iterator);
    }

  };
}